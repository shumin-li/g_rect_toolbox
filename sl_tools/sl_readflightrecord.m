function DJI = sl_readflightrecord(flnam)


if ~iscell(flnam)
    flnam={flnam};
end

for k = 1:numel(flnam)
fprintf('Reading %s\n',flnam{k});

% Import data from text file
% Script for importing data from the following text file:
%
%    filename: /Users/shuminli/Documents/research/Drones/rich/calibration/23Feb17_Thunderbird/flight_records/csv/FlightRecord_flight_1.csv
%
% Auto-generated by MATLAB on 25-Apr-2024 12:04:31

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 186, "Encoding", "UTF-8");

% Specify range and delimiter
opts.DataLines = [3, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["CUSTOMdateUTC", "CUSTOMupdateTimeUTC", "CUSTOMdate", "CUSTOMupdateTime", "OSDflyTime", "OSDflyTimes", "OSDlatitude", "OSDlongitude", "OSDheightft", "OSDheightMaxft", "OSDvpsHeightft", "OSDaltitudeft", "OSDmileageft", "OSDhSpeedMPH", "OSDhSpeedMaxMPH", "OSDxSpeedMPH", "OSDxSpeedMaxMPH", "OSDySpeedMPH", "OSDySpeedMaxMPH", "OSDzSpeedMPH", "OSDzSpeedMaxMPH", "OSDpitch", "OSDroll", "OSDyaw", "OSDyaw360", "OSDflycState", "OSDflycCommand", "OSDflightAction", "OSDgpsNum", "OSDgpsLevel", "OSDisGPSUsed", "OSDnonGPSCause", "OSDdroneType", "OSDisSwaveWork", "OSDwaveError", "OSDgoHomeStatus", "OSDbatteryType", "OSDctrlDevice", "OSDisOnGround", "OSDisMotorOn", "OSDisMotorBlocked", "OSDmotorStartFailedCause", "OSDmotorFailReason", "OSDisImuPreheated", "OSDimuInitFailReason", "OSDisAcceletorOverRange", "OSDisBarometerDeadInAir", "OSDisCompassError", "OSDisGoHomeHeightModified", "OSDcanIOCWork", "OSDisNotEnoughForce", "OSDisOutOfLimit", "OSDisPropellerCatapult", "OSDisVibrating", "OSDisVisionUsed", "OSDvoltageWarning", "GIMBALmode", "GIMBALpitch", "GIMBALroll", "GIMBALyaw", "GIMBALyaw360", "GIMBALisPitchAtLimit", "GIMBALisRollAtLimit", "GIMBALisYawAtLimit", "GIMBALisStuck", "CAMERAisPhoto", "CAMERAisVideo", "CAMERAfilename", "CAMERAsdCardIsInserted", "CAMERAsdCardState", "RCdownlinkSignal", "RCuplinkSignal", "RCaileron", "RCelevator", "RCthrottle", "RCrudder", "RCmode", "RCgoHomeDepressed", "RCrecordDepressed", "RCshutterDepressed", "RCplaybackDepressed", "RCwheelDepressed", "RCwheelOffset", "RCcustom1Depressed", "RCcustom2Depressed", "RCcustom3Depressed", "RCcustom4Depressed", "BATTERYchargeLevel", "BATTERYcurrentPVV", "BATTERYcurrentCapacitymAh", "BATTERYfullCapacitymAh", "BATTERYvoltageV", "BATTERYisCellVoltageEstimated", "BATTERYcellVoltage1V", "BATTERYcellVoltage2V", "BATTERYmaxCellVoltageDeviation", "BATTERYisCellVoltageDeviationHigh", "BATTERYisVoltageLow", "BATTERYcurrentA", "BATTERYtemperatureF", "BATTERYminTemperatureF", "BATTERYmaxTemperatureF", "BATTERYusefulTimes", "BATTERYgoHomeTimes", "BATTERYlandTimes", "BATTERYgoHomeBattery", "BATTERYlandBattery", "BATTERYsafeFlyRadius", "BATTERYvolumeConsume", "BATTERYstatus", "BATTERYgoHomeStatus", "BATTERYgoHomeCountdown", "BATTERYlowWarning", "BATTERYlowWarningGoHome", "BATTERYseriousLowWarning", "BATTERYseriousLowWarningLanding", "BATTERYtimesCharged", "MCfailSafeAction", "MCisObstacleAvoidanceEnabled", "MCisCollisionAvoidanceEnabled", "MCisRthObstacleAvoidanceEnabled", "MCisBraking", "MCisAvoidingObstacle", "MCisAvoidingActiveObstacle", "MCisAscentLimitedByObstacle", "MCisLandingConfirmationNeeded", "MCatLowAltitudeLimit", "MCatDistanceLimit", "MCatAirportAltitudeLimit", "MCatAirportBoundary", "HOMElatitude", "HOMElongitude", "HOMEdistanceft", "HOMEheightft", "HOMEheightLimitft", "HOMEisHomeRecord", "HOMEgoHomeMode", "HOMEaircraftHeadDirection", "HOMEisDynamicHomePointEnabled", "HOMEisReachedLimitDistance", "HOMEisReachedLimitHeight", "HOMEisCompassCeiling", "HOMEcompassCeleStatus", "HOMEisMultipleFlightModeEnabled", "HOMEisBeginnerMode", "HOMEisIOCEnabled", "HOMEiocMode", "HOMEgoHomeHeightft", "HOMEcourseLockAngle", "HOMEforceLandingHeightft", "HOMEwind", "HOMEdataRecorderFileIndex", "RECOVERappType", "RECOVERappVersion", "RECOVERaircraftName", "RECOVERaircraftSerial", "RECOVERcameraSerial", "RECOVERrcSerial", "RECOVERbatterySerial", "DETAILStotalTimes", "DETAILStotalDistanceft", "DETAILSmaxHeightft", "DETAILSmaxHorizontalSpeedMPH", "DETAILSmaxVerticalSpeedMPH", "DETAILSphotoNum", "DETAILSvideoTimes", "DETAILSaircraftName", "DETAILSaircraftSerial", "DETAILScameraSerial", "DETAILSrcSerial", "DETAILSbatterySerial", "DETAILSappName", "DETAILSappType", "DETAILSappVersion", "DETAILSguid", "SERIALflightController", "SERIALcamera", "SERIALgimbal", "SERIALrc", "SERIALbattery", "APPGPSlatitude", "APPGPSlongitude", "APPGPSaccuracy", "APPmessage", "APPtip", "APPwarning"];
opts.VariableTypes = ["datetime", "datetime", "datetime", "datetime", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "categorical", "categorical", "string", "double", "double", "categorical", "string", "double", "categorical", "categorical", "string", "categorical", "categorical", "categorical", "categorical", "categorical", "string", "string", "categorical", "string", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "double", "categorical", "double", "double", "double", "double", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "string", "categorical", "categorical", "double", "double", "double", "double", "double", "double", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "double", "categorical", "categorical", "categorical", "categorical", "double", "double", "double", "double", "double", "categorical", "double", "double", "double", "categorical", "categorical", "double", "double", "double", "double", "string", "string", "string", "string", "string", "string", "string", "string", "categorical", "string", "string", "categorical", "string", "categorical", "double", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "double", "double", "double", "string", "double", "categorical", "double", "double", "categorical", "categorical", "categorical", "categorical", "double", "categorical", "categorical", "categorical", "string", "double", "string", "double", "categorical", "double", "string", "datetime", "double", "categorical", "categorical", "categorical", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "categorical", "categorical", "categorical", "categorical", "categorical", "string", "datetime", "categorical", "categorical", "string", "string", "string", "string", "string", "string", "string", "double", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["OSDflyTime", "OSDflightAction", "OSDnonGPSCause", "OSDgoHomeStatus", "OSDmotorStartFailedCause", "OSDmotorFailReason", "OSDimuInitFailReason", "CAMERAfilename", "BATTERYusefulTimes", "BATTERYgoHomeTimes", "BATTERYlandTimes", "BATTERYgoHomeBattery", "BATTERYlandBattery", "BATTERYsafeFlyRadius", "BATTERYvolumeConsume", "BATTERYstatus", "BATTERYgoHomeCountdown", "BATTERYlowWarning", "BATTERYseriousLowWarning", "HOMEheightft", "HOMEiocMode", "HOMEcourseLockAngle", "RECOVERappType", "DETAILSappType", "SERIALcamera", "SERIALgimbal", "SERIALrc", "SERIALbattery", "APPGPSlatitude", "APPGPSlongitude", "APPGPSaccuracy", "APPtip", "APPwarning"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["OSDflyTime", "OSDflycState", "OSDflycCommand", "OSDflightAction", "OSDisGPSUsed", "OSDnonGPSCause", "OSDisSwaveWork", "OSDwaveError", "OSDgoHomeStatus", "OSDbatteryType", "OSDctrlDevice", "OSDisOnGround", "OSDisMotorOn", "OSDisMotorBlocked", "OSDmotorStartFailedCause", "OSDmotorFailReason", "OSDisImuPreheated", "OSDimuInitFailReason", "OSDisAcceletorOverRange", "OSDisBarometerDeadInAir", "OSDisCompassError", "OSDisGoHomeHeightModified", "OSDcanIOCWork", "OSDisNotEnoughForce", "OSDisOutOfLimit", "OSDisPropellerCatapult", "OSDisVibrating", "OSDisVisionUsed", "GIMBALmode", "GIMBALisPitchAtLimit", "GIMBALisRollAtLimit", "GIMBALisYawAtLimit", "GIMBALisStuck", "CAMERAisPhoto", "CAMERAisVideo", "CAMERAfilename", "CAMERAsdCardIsInserted", "CAMERAsdCardState", "RCmode", "RCgoHomeDepressed", "RCrecordDepressed", "RCshutterDepressed", "RCplaybackDepressed", "RCwheelDepressed", "RCcustom1Depressed", "RCcustom2Depressed", "RCcustom3Depressed", "RCcustom4Depressed", "BATTERYisCellVoltageEstimated", "BATTERYisCellVoltageDeviationHigh", "BATTERYisVoltageLow", "BATTERYusefulTimes", "BATTERYgoHomeTimes", "BATTERYlandTimes", "BATTERYgoHomeBattery", "BATTERYlandBattery", "BATTERYsafeFlyRadius", "BATTERYvolumeConsume", "BATTERYstatus", "BATTERYgoHomeStatus", "BATTERYgoHomeCountdown", "BATTERYlowWarning", "BATTERYlowWarningGoHome", "BATTERYseriousLowWarning", "BATTERYseriousLowWarningLanding", "MCfailSafeAction", "MCisObstacleAvoidanceEnabled", "MCisCollisionAvoidanceEnabled", "MCisRthObstacleAvoidanceEnabled", "MCisBraking", "MCisAvoidingObstacle", "MCisAvoidingActiveObstacle", "MCisAscentLimitedByObstacle", "MCisLandingConfirmationNeeded", "MCatLowAltitudeLimit", "MCatDistanceLimit", "MCatAirportAltitudeLimit", "MCatAirportBoundary", "HOMEheightft", "HOMEisHomeRecord", "HOMEisDynamicHomePointEnabled", "HOMEisReachedLimitDistance", "HOMEisReachedLimitHeight", "HOMEisCompassCeiling", "HOMEisMultipleFlightModeEnabled", "HOMEisBeginnerMode", "HOMEisIOCEnabled", "HOMEiocMode", "HOMEcourseLockAngle", "HOMEwind", "RECOVERappType", "RECOVERaircraftSerial", "RECOVERcameraSerial", "RECOVERrcSerial", "RECOVERbatterySerial", "DETAILSaircraftSerial", "DETAILScameraSerial", "DETAILSrcSerial", "DETAILSbatterySerial", "DETAILSappName", "DETAILSappType", "DETAILSguid", "SERIALflightController", "SERIALcamera", "SERIALgimbal", "SERIALrc", "SERIALbattery", "APPGPSlatitude", "APPGPSlongitude", "APPGPSaccuracy", "APPtip", "APPwarning"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, "RECOVERappVersion", "InputFormat", "dd.MM.yy");
opts = setvaropts(opts, "DETAILSappVersion", "InputFormat", "dd.MM.yy");
opts = setvaropts(opts, ["OSDdroneType", "RECOVERaircraftName", "DETAILSaircraftName", "APPmessage"], "TrimNonNumeric", true);
opts = setvaropts(opts, ["OSDdroneType", "RECOVERaircraftName", "DETAILSaircraftName", "APPmessage"], "ThousandsSeparator", ",");

% Import the data
this_table = readtable(flnam{k}, opts);

%% Clear temporary variables
clear opts

%% making data structure DJI

m2f = 3.28084;


if k == 1
DJI=struct('mtime',datenum(this_table.CUSTOMupdateTimeUTC),...
    'timezone','UTC',...
    'OSDlat',this_table.OSDlatitude,...
    'OSDlon',this_table.OSDlongitude,...
    'OSDheight',this_table.OSDheightft/m2f,...
    'OSDvpsheight',this_table.OSDvpsHeightft/m2f,...
    'OSDaltitude',this_table.OSDaltitudeft/m2f,...
    'OSDpitch',this_table.OSDpitch,...
    'OSDroll',this_table.OSDroll,...
    'OSDyaw',this_table.OSDyaw,...
    'OSDgpsnum',this_table.OSDgpsNum,...
    'battV',this_table.BATTERYvoltageV,....  % V
    'battC',this_table.BATTERYcurrentCapacitymAh,...    % A
    'GIMBALpitch',this_table.GIMBALpitch,...
    'GIMBALroll',this_table.GIMBALroll,...
    'GIMBALyaw',this_table.GIMBALyaw, ...
    'GPSlat',this_table.OSDlatitude,...  % Repeat
    'GPSlon',this_table.OSDlongitude  ); % Repeat again

else
    
    DJI.mtime=[DJI.mtime;datenum(this_table.CUSTOMupdateTimeUTC)];
    DJI.OSDlat=[DJI.OSDlat;this_table.OSDlatitude];
    DJI.OSDlon=[DJI.OSDlon;this_table.OSDlongitude];
    DJI.OSDheight=[DJI.OSDheight;this_table.OSDheightft/m2f];
    DJI.OSDvpsheight=[DJI.OSDvpsheight;this_table.OSDvpsHeightft/m2f];
    DJI.OSDaltitude=[DJI.OSDaltitude;this_table.OSDaltitudeft/m2f];
    DJI.OSDpitch=[DJI.OSDpitch;this_table.OSDpitch];
    DJI.OSDroll=[DJI.OSDroll;this_table.OSDroll];
    DJI.OSDyaw=[DJI.OSDyaw;this_table.OSDyaw];
    DJI.OSDgpsnum=[DJI.OSDgpsnum;this_table.OSDgpsNum];
    DJI.battV=[DJI.battV;this_table.BATTERYvoltageV];
    DJI.battC=[DJI.battC;this_table.BATTERYcurrentCapacitymAh];
    DJI.GIMBALpitch=[DJI.GIMBALpitch;this_table.GIMBALpitch];
    DJI.GIMBALroll=[DJI.GIMBALroll;this_table.GIMBALroll];
    DJI.GIMBALyaw=[DJI.GIMBALyaw;this_table.GIMBALyaw];
    DJI.GPSlat=[DJI.GPSlat;this_table.OSDlatitude]; % repeat
    DJI.GPSlon=[DJI.GPSlon;this_table.OSDlongitude];

end

end



end